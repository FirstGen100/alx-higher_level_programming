The library has one function ``add_integer()``.

Numbers
=======
``add_integer`` returns the sum of its arguments.

::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

testing with floating point values.
::
	>>> add_integer(2.3, 3.1)
	5

Non-Numbers.
::
	>>> add_integer('a', 20)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(20, 'b')
	Traceback (most recent call last):
	TypeError: b must be an integer

::
	>>> add_integer('a', 'b')
	Traceback (most recent call last):
	TypeError: a must be an integer

Number of arguments.
::
	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

	>>> add_integer(2)
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'b'

	>>> add_integer(,3)
	Traceback (most recent call last):
	SyntaxError: invalid syntax

Float overflow.
::
	>>> add_integer(float('inf'), float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Nan to integer convertion.
::
	>>> add_integer(0,float('NaN'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

	>>> add_integer(float('NaN'),3)
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer
